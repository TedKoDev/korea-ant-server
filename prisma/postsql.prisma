datasource db {
  provider = "postgresql"
  url      = env("POSTGRE_SQL_DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

model users {
  user_id             Int              @id @default(autoincrement())
  username            String           @unique @db.VarChar(50)
  email               String           @unique @db.VarChar(100)
  bio                 String?          @db.Text
  encrypted_password  String           @db.VarChar(255)
  profile_picture_url String?          @db.VarChar(255)
  phone_number        String?          @db.VarChar(20)
  email_verification_token String?     @db.VarChar(255)
  points              Int              @default(2000)
  level               Int              @default(1)
  is_email_verified   Boolean          @default(false)
  role                role             @default(USER)
  account_status      accountStatus    @default(ACTIVE)
  sign_up_ip          String?          @db.VarChar(45)
  login_count         Int              @default(0)
  created_at          DateTime         @default(now()) @db.Timestamp
  last_login_at       DateTime?
  updated_at          DateTime?        @db.Timestamp
  deleted_at          DateTime?        @db.Timestamp
  social_login        social_login[]
  point               point[]
  post                post[]
  comment             comment[]
  comment_like        comment_like[]
  like                like[]
  admin_action        admin_action[]
  auth_code           auth_code[]
  following           follow[] @relation("FollowingRelation")
  followers           follow[] @relation("FollowerRelation")
  report_reported     report[] @relation("ReportedUser")
  report_reporter     report[] @relation("Reporter")
  report_resolved     report[] @relation("ResolvedBy")
  user_block_blocker  user_block[] @relation("Blocker")
  user_block_blocked  user_block[] @relation("Blocked")
  admin_block_admin   admin_block[] @relation("Admin")
  admin_block_blocked admin_block[] @relation("AdminBlockedUser")
  bet_post            bet_post[]       // 새로운 베팅 게시글과의 관계
  bet_comment         bet_comment[]    // 새로운 베팅 댓글과의 관계
  bet_like            bet_like[]       // 새로운 베팅 좋아요와의 관계
  bet                 bet[]           // 베팅과의 관계
}

model levelthreshold {
  level                Int     @id
  min_posts            Int
  min_comments         Int
  min_likes            Int
  min_logins           Int     @default(0)
  created_at           DateTime @default(now()) @db.Timestamp
  updated_at           DateTime? @db.Timestamp
  deleted_at           DateTime? @db.Timestamp
}

model ad_banner {
  id                 Int      @id @default(autoincrement())
  position           String
  company_name       String
  contract_period    Int
  contract_date      DateTime
  start_date         DateTime
  end_date           DateTime
  image_url          String
  status             ad_banner_status @default(INACTIVE)
  created_at         DateTime @default(now()) @db.Timestamp
  updated_at         DateTime? @db.Timestamp
  deleted_at         DateTime? @db.Timestamp
}

enum ad_banner_status {
  ACTIVE
  INACTIVE
}

model social_login {
  social_login_id  Int        @id @default(autoincrement())
  user_id          Int
  provider         provider
  provider_user_id String     @db.VarChar(255)
  created_at       DateTime   @default(now()) @db.Timestamp
  updated_at       DateTime?  @db.Timestamp
  deleted_at       DateTime?  @db.Timestamp
  user             users      @relation(fields: [user_id], references: [user_id])
}

model follow {
  follow_id        Int      @id @default(autoincrement())
  follower_id      Int
  following_id     Int
  created_at       DateTime @default(now()) @db.Timestamp
  updated_at       DateTime? @db.Timestamp
  deleted_at       DateTime? @db.Timestamp
  follower         users    @relation("FollowingRelation", fields: [follower_id], references: [user_id])
  following        users    @relation("FollowerRelation", fields: [following_id], references: [user_id])
}

model auth_code {
  id          Int         @id @default(autoincrement())
  user_id     Int         @unique
  code        String      @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  koreaant_code String    @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  expired_at  DateTime
  createdAt   DateTime    @default(now())
  user        users       @relation(fields: [user_id], references: [user_id])
}

model point {
  point_id      Int       @id @default(autoincrement())
  user_id       Int
  points_change Int
  change_reason String?   @db.VarChar(255)
  is_bet        Boolean   @default(false) // 이 포인트 변경이 베팅과 관련 있는지 여부
  related_bet_id Int?     // 이 포인트 변경이 특정 베팅과 관련이 있는 경우 연결
  change_date   DateTime  @default(now()) @db.Timestamp
  created_at    DateTime  @default(now()) @db.Timestamp
  updated_at    DateTime? @db.Timestamp
  deleted_at    DateTime? @db.Timestamp
  user          users     @relation(fields: [user_id], references: [user_id])
}

model topic {
  topic_id    Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp
  updated_at  DateTime? @db.Timestamp
  deleted_at  DateTime? @db.Timestamp
  category    category[]
}

model category {
  category_id    Int       @id @default(autoincrement())
  topic_id       Int
  category_name  String    @db.VarChar(100)
  created_at     DateTime  @default(now()) @db.Timestamp
  updated_at     DateTime? @db.Timestamp
  deleted_at     DateTime? @db.Timestamp
  topic          topic     @relation(fields: [topic_id], references: [topic_id])
  post           post[]
}

model media {
  media_id    Int       @id @default(autoincrement())
  post_id     Int?
  comment_id  Int?
  media_type  media_type
  media_url   String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp
  updated_at  DateTime? @db.Timestamp
  deleted_at  DateTime? @db.Timestamp
  post        post?     @relation(fields: [post_id], references: [post_id])
  comment     comment?  @relation(fields: [comment_id], references: [comment_id])
}

model comment {
  comment_id       Int       @id @default(autoincrement())
  post_id          Int
  user_id          Int
  content          String    @db.Text
  parent_comment_id Int?
  status           comment_status @default(PUBLIC)
  likes            Int        @default(0)
  created_at       DateTime   @default(now()) @db.Timestamp
  updated_at       DateTime?  @db.Timestamp
  deleted_at       DateTime?  @db.Timestamp
  isSelected       Boolean?   @default(false)
  post             post       @relation(fields: [post_id], references: [post_id])
  user             users      @relation(fields: [user_id], references: [user_id])
  parent_comment   comment?   @relation("CommentToComment", fields: [parent_comment_id], references: [comment_id])
  child_comments   comment[]  @relation("CommentToComment")
  comment_like     comment_like[]
  media            media[]
}

model comment_like {
  comment_like_id Int       @id @default(autoincrement())
  comment_id      Int
  user_id         Int
  liked_at        DateTime  @default(now()) @db.Timestamp
  created_at      DateTime  @default(now()) @db.Timestamp
  updated_at      DateTime? @db.Timestamp
  deleted_at      DateTime? @db.Timestamp
  comment         comment   @relation(fields: [comment_id], references: [comment_id])
  user            users     @relation(fields: [user_id], references: [user_id])
}

model post {
  post_id      Int       @id @default(autoincrement())
  user_id      Int
  category_id  Int
  type         post_type
  status       post_status @default(PUBLIC)
  views        Int        @default(0)
  likes        Int        @default(0)
  comments     Int        @default(0)
  created_at   DateTime   @default(now()) @db.Timestamp
  updated_at   DateTime?  @db.Timestamp
  deleted_at   DateTime?  @db.Timestamp
  user         users      @relation(fields: [user_id], references: [user_id])
  category     category   @relation(fields: [category_id], references: [category_id])
  media        media[]
  comment      comment[]
  like         like[]
  post_tag     post_tag[]
  post_view    post_view[]
  post_general post_general?
  post_column  post_column?
  post_question post_question?
}

model post_general {
  general_id    Int       @id @default(autoincrement())
  post_id       Int       @unique
  title         String    @db.VarChar(255)
  content       String    @db.Text
  created_at    DateTime  @default(now()) @db.Timestamp
  updated_at    DateTime? @db.Timestamp
  deleted_at    DateTime? @db.Timestamp
  post          post      @relation(fields: [post_id], references: [post_id])
}

model post_column {
  column_id     Int       @id @default(autoincrement())
  post_id       Int       @unique
  title         String    @db.VarChar(255)
  content       String    @db.Text
  created_at    DateTime  @default(now()) @db.Timestamp
  updated_at    DateTime? @db.Timestamp
  deleted_at    DateTime? @db.Timestamp
  post          post      @relation(fields: [post_id], references: [post_id])
}

model post_question {
  question_id   Int       @id @default(autoincrement())
  post_id       Int       @unique
  title         String    @db.VarChar(255)
  content       String    @db.Text
  points        Int       @default(0)
  isAnswered    Boolean   @default(false)
  created_at    DateTime  @default(now()) @db.Timestamp
  updated_at    DateTime? @db.Timestamp
  deleted_at    DateTime? @db.Timestamp
  post          post      @relation(fields: [post_id], references: [post_id])
}

model like {
  like_id     Int       @id @default(autoincrement())
  post_id     Int
  user_id     Int
  created_at  DateTime  @default(now()) @db.Timestamp
  updated_at  DateTime? @db.Timestamp
  deleted_at  DateTime? @db.Timestamp
  post        post      @relation(fields: [post_id], references: [post_id])
  user        users     @relation(fields: [user_id], references: [user_id])
}

model tag {
  tag_id        Int       @id @default(autoincrement())
  tag_name      String    @unique @db.VarChar(100)
  is_admin_tag  Boolean   @default(false)
  usage_count   Int       @default(0)
  created_at    DateTime  @default(now()) @db.Timestamp
  updated_at    DateTime? @db.Timestamp
  deleted_at    DateTime? @db.Timestamp
  post_tag      post_tag[]
}

model post_tag {
  post_tag_id  Int       @id @default(autoincrement())
  post_id      Int
  tag_id       Int
  created_at   DateTime  @default(now()) @db.Timestamp
  updated_at   DateTime? @db.Timestamp
  deleted_at   DateTime? @db.Timestamp
  post         post      @relation(fields: [post_id], references: [post_id])
  tag          tag       @relation(fields: [tag_id], references: [tag_id])
}

model post_view {
  post_view_id  Int       @id @default(autoincrement())
  post_id       Int
  ip_address    String    @db.VarChar(45)
  viewed_at     DateTime  @default(now()) @db.Timestamp
  created_at    DateTime  @default(now()) @db.Timestamp
  updated_at    DateTime? @db.Timestamp
  deleted_at    DateTime? @db.Timestamp
  post          post      @relation(fields: [post_id], references: [post_id])
}

model admin_action {
  action_id       Int       @id @default(autoincrement())
  admin_user_id   Int
  target_type     target_type
  target_id       Int
  action_type     action_type
  reason          String?   @db.Text
  action_timestamp DateTime @default(now()) @db.Timestamp
  adminUser       users     @relation(fields: [admin_user_id], references: [user_id])
}

enum report_target_type {
  POST
  COMMENT
  USER
}

model report {
  report_id         Int               @id @default(autoincrement())
  target_type       report_target_type
  target_id         Int
  reported_user_id  Int
  reported_user     users             @relation("ReportedUser", fields: [reported_user_id], references: [user_id])
  reporter_user_id  Int
  reporter_user     users             @relation("Reporter", fields: [reporter_user_id], references: [user_id])
  reason            String            @db.Text
  status            report_status      @default(PENDING)
  created_at        DateTime          @default(now()) @db.Timestamp
  updated_at        DateTime?         @db.Timestamp
  resolved_at       DateTime?         @db.Timestamp
  resolved_by_user_id Int?
  resolved_by       users?            @relation("ResolvedBy", fields: [resolved_by_user_id], references: [user_id])
}

model user_block {
  block_id   Int       @id @default(autoincrement())
  blocker    users     @relation("Blocker", fields: [blocker_id], references: [user_id])
  blocker_id Int
  blocked    users     @relation("Blocked", fields: [blocked_id], references: [user_id])
  blocked_id Int
  created_at DateTime  @default(now()) @db.Timestamp
  deleted_at DateTime? @db.Timestamp
}

model admin_block {
  admin_block_id Int       @id @default(autoincrement())
  admin          users     @relation("Admin", fields: [admin_id], references: [user_id])
  admin_id       Int
  blocked_user   users     @relation("AdminBlockedUser", fields: [blocked_user_id], references: [user_id])
  blocked_user_id Int
  reason         String    @db.Text
  created_at     DateTime  @default(now()) @db.Timestamp
  unblocked_at   DateTime?
  block_count    Int       @default(1)
  updated_at     DateTime  @updatedAt @db.Timestamp
}

enum report_status {
  PENDING
  RESOLVED
  REJECTED
}

enum role {
  USER
  ADMIN
}


enum accountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}
enum provider {
  GOOGLE
  FACEBOOK
  TWITTER
  LINKEDIN
  GITHUB
}

enum post_type {
  GENERAL
  COLUMN
  QUESTION
}

enum sort_type {
  LATEST
  POPULAR
}

enum post_status {
  PUBLIC
  DRAFT
  DELETED
}

enum media_type {
  IMAGE
  VIDEO
}

enum comment_status {
  PUBLIC
  DELETED
}

enum target_type {
  POST
  COMMENT
}

enum action_type {
  DELETE
}

// 새로운 베팅 관련 테이블들

model stock {
  stock_id    Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  symbol      String    @unique @db.VarChar(10)
  description String?   @db.Text
  created_at  DateTime  @default(now()) @db.Timestamp
  updated_at  DateTime? @db.Timestamp
  deleted_at  DateTime? @db.Timestamp
  bets        bet[]     // 베팅과의 관계 설정
  market_events market_event[] // 시장 이벤트와의 관계 설정
}

model bet_post {
  bet_post_id   Int       @id @default(autoincrement())
  user_id       Int       // 관리자가 작성
  title         String    @db.VarChar(255)
  content       String    @db.Text
  created_at    DateTime  @default(now()) @db.Timestamp
  updated_at    DateTime? @db.Timestamp
  deleted_at    DateTime? @db.Timestamp
  user          users     @relation(fields: [user_id], references: [user_id])
  bets          bet[]     // 이 게시글과 연결된 베팅
  bet_comments  bet_comment[] // 베팅 게시글에 달린 댓글
  bet_likes     bet_like[]    // 베팅 게시글의 좋아요
}

model bet {
  bet_id        Int       @id @default(autoincrement())
  user_id       Int
  stock_id      Int
  bet_post_id   Int       // 베팅을 설명하는 게시글 ID
  bet_amount    Int       // 사용자가 베팅한 포인트
  direction     bet_direction // 상승 또는 하락을 나타내는 Enum
  fixed_odds    Float     // 베팅 시점의 고정된 배당률
  status        bet_status @default(OPEN) // 베팅 상태 (OPEN, WON, LOST, CANCELLED)
  created_at    DateTime  @default(now()) @db.Timestamp
  updated_at    DateTime? @db.Timestamp
  resolved_at   DateTime? @db.Timestamp
  user          users     @relation(fields: [user_id], references: [user_id])
  stock         stock     @relation(fields: [stock_id], references: [stock_id])
  bet_post      bet_post  @relation(fields: [bet_post_id], references: [bet_post_id]) // bet_post와의 관계
}

model bet_comment {
  bet_comment_id Int       @id @default(autoincrement())
  bet_post_id    Int
  user_id        Int
  content        String    @db.Text
  created_at     DateTime  @default(now()) @db.Timestamp
  updated_at     DateTime? @db.Timestamp
  deleted_at     DateTime? @db.Timestamp
  bet_post       bet_post  @relation(fields: [bet_post_id], references: [bet_post_id])
  user           users     @relation(fields: [user_id], references: [user_id])
  bet_likes      bet_like[] // 댓글의 좋아요
}

model bet_like {
  bet_like_id  Int       @id @default(autoincrement())
  bet_post_id  Int?      // 게시글 좋아요일 경우
  bet_comment_id Int?    // 댓글 좋아요일 경우
  user_id      Int
  created_at   DateTime  @default(now()) @db.Timestamp
  updated_at   DateTime? @db.Timestamp
  deleted_at   DateTime? @db.Timestamp
  bet_post     bet_post?  @relation(fields: [bet_post_id], references: [bet_post_id])
  bet_comment  bet_comment? @relation(fields: [bet_comment_id], references: [bet_comment_id])
  user         users     @relation(fields: [user_id], references: [user_id])
}

enum bet_direction {
  UP
  DOWN
}

enum bet_status {
  OPEN
  WON
  LOST
  CANCELLED
}

model market_event { // market_event 모델에 저장된 종가를 확인하여 주식이 실제로 상승했는지 판단합니다.
  event_id     Int       @id @default(autoincrement())
  stock_id     Int
  closing_price Float
  event_date   DateTime  @default(now()) @db.Timestamp
  resolved_at  DateTime? @db.Timestamp
  stock        stock     @relation(fields: [stock_id], references: [stock_id])
}
